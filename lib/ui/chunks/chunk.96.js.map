{"version":3,"sources":["webpack:///./src/ui/src/helpers/capitalize.js","webpack:///./src/ui/src/helpers/performClipboardActionOnCells.js","webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/CopyPasteCutButton.js"],"names":["capitalize","str","charAt","toUpperCase","slice","performClipboardActionOnCells","actionType","clipboard","core","getDocumentViewer","getDocument","getSpreadsheetEditorDocument","getClipboard","copy","paste","cut","propTypes","PropTypes","oneOf","Object","values","CELL_ACTION_OPTIONS","isRequired","isFlyoutItem","bool","style","object","className","string","CopyPasteCutButton","forwardRef","props","ref","isEnabled","useSelector","state","selectorName","selector","selectors","buttonSelector","menuItems","dataElement","icon","title","handleClick","FlyoutItemContainer","onClick","additionalClass","ActionButton","disabled","key","isActive","img","ariaPressed","displayName"],"mappings":"yLAOeA,G,MAPI,SAACC,GAClB,MAAmB,iBAARA,EACF,GAEFA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,qBCoBlCC,MAtBf,SAAuCC,GACrC,GAAKA,EAAL,CAIA,IAAMC,EAAYC,IAAKC,oBAAoBC,cAAcC,+BAA+BC,eAExF,OAAQN,GACN,IAAK,OACHC,EAAUM,OACV,MACF,IAAK,QACHN,EAAUO,QACV,MACF,IAAK,MACHP,EAAUQ,S,mOCNhB,IAAMC,EAAY,CAChBV,WAAYW,IAAUC,MAAMC,OAAOC,OAAOC,MAAsBC,WAChEC,aAAcN,IAAUO,KACxBC,MAAOR,IAAUS,OACjBC,UAAWV,IAAUW,QAGjBC,EAAqBC,sBAAW,SAACC,EAAOC,GAC5C,IAAQT,EAA+CQ,EAA/CR,aAAcjB,EAAiCyB,EAAjCzB,WAAYmB,EAAqBM,EAArBN,MAAOE,EAAcI,EAAdJ,UAEnCM,EAAYC,aAAY,SAACC,GAC7B,IAAMC,EAAe,SAAH,OAAYpC,EAAWM,IACnC+B,EAAWC,IAAUF,GAC3B,QAAKC,GAGEA,EAASF,MAGZI,EAAiB,OAAH,OAAUvC,EAAWM,IACzC,EAAqCkC,IAAUD,GAAvCE,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAErBC,EAAc,WAClBvC,EAA8BC,IAGhC,OACEiB,EACE,kBAACsB,EAAA,EAAmB,KACdd,EAAK,CACTC,IAAKA,EACLc,QAASF,EACTG,gBAAuC,MAGvC,kBAACC,EAAA,EAAY,CACXC,UAAWhB,EACXiB,IAAK5C,EACL6C,UA7BS,EA8BTL,QAASF,EACTH,YAAaA,EACbE,MAAOA,EACPS,IAAKV,EACLW,aAlCS,EAmCT5B,MAAOA,EACPE,UAAWA,OAMrBE,EAAmBb,UAAYA,EAC/Ba,EAAmByB,YAAc,qBAElBzB","file":"chunks/chunk.96.js","sourcesContent":["const capitalize = (str) => {\n  if (typeof str !== 'string') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport default capitalize;\n","import core from 'core';\n\nfunction performClipboardActionOnCells(actionType) {\n  if (!actionType) {\n    return;\n  }\n\n  const clipboard = core.getDocumentViewer().getDocument().getSpreadsheetEditorDocument().getClipboard();\n\n  switch (actionType) {\n    case 'copy':\n      clipboard.copy();\n      break;\n    case 'paste':\n      clipboard.paste();\n      break;\n    case 'cut':\n      clipboard.cut();\n      break;\n    default:\n      break;\n  }\n}\n\nexport default performClipboardActionOnCells;","import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport PropTypes from 'prop-types';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport { CELL_ACTION_OPTIONS } from 'constants/spreadsheetEditor';\nimport capitalize from 'helpers/capitalize';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport performClipboardActionOnCells from 'src/helpers/performClipboardActionOnCells';\n\nconst propTypes = {\n  actionType: PropTypes.oneOf(Object.values(CELL_ACTION_OPTIONS)).isRequired,\n  isFlyoutItem: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst CopyPasteCutButton = forwardRef((props, ref) => {\n  const { isFlyoutItem, actionType, style, className } = props;\n  const isActive = false;\n  const isEnabled = useSelector((state) => {\n    const selectorName = `getCan${capitalize(actionType)}`;\n    const selector = selectors[selectorName];\n    if (!selector) {\n      return false;\n    }\n    return selector(state);\n  });\n\n  const buttonSelector = `cell${capitalize(actionType)}`;\n  const { dataElement, icon, title } = menuItems[buttonSelector];\n\n  const handleClick = () => {\n    performClipboardActionOnCells(actionType);\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        additionalClass={isActive ? 'active' : ''}\n      />\n      : (\n        <ActionButton\n          disabled={!isEnabled}\n          key={actionType}\n          isActive={isActive}\n          onClick={handleClick}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          ariaPressed={isActive}\n          style={style}\n          className={className}\n        />\n      )\n  );\n});\n\nCopyPasteCutButton.propTypes = propTypes;\nCopyPasteCutButton.displayName = 'CopyPasteCutButton';\n\nexport default CopyPasteCutButton;"],"sourceRoot":""}