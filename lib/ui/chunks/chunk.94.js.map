{"version":3,"sources":["webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/CellDecoratorButton.js"],"names":["propTypes","styleType","PropTypes","oneOf","Object","values","STYLE_TOGGLE_OPTIONS","isRequired","isFlyoutItem","bool","style","object","className","string","CellDecoratorButton","forwardRef","props","ref","isActive","useSelector","state","selectors","getActiveCellRangeFontStyle","menuItems","dataElement","icon","title","handleClick","setCellFontStyle","onClick","additionalClass","ariaCurrent","img","displayName"],"mappings":"spCAUA,IAAMA,EAAY,CAChBC,UAAWC,IAAUC,MAAMC,OAAOC,OAAOC,MAAuBC,WAChEC,aAAcN,IAAUO,KACxBC,MAAOR,IAAUS,OACjBC,UAAWV,IAAUW,QAGjBC,EAAsBC,sBAAW,SAACC,EAAOC,GAC7C,IAAQT,EAA8CQ,EAA9CR,aAAcP,EAAgCe,EAAhCf,UAAWS,EAAqBM,EAArBN,MAAOE,EAAcI,EAAdJ,UAElCM,EADmBC,aAAY,SAACC,GAAK,OAAKC,IAAUC,4BAA4BF,EAAOnB,MAE7F,EAAqCsB,IAAU,GAAD,OAAItB,EAAS,WAAnDuB,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAErBC,EAAc,WAClBC,YAAiB,EAAD,GAAI3B,GAAaiB,KAGnC,OACEV,EACE,kBAAC,IAAmB,KACdQ,EAAK,CACTC,IAAKA,EACLY,QAASF,EACTG,gBAAiBZ,EAAW,SAAW,MAGvC,kBAAC,IAAY,CACXa,YAAab,EACbA,SAAUA,EACVM,YAAaA,EACbE,MAAOA,EACPM,IAAKP,EACLI,QAASF,EACTjB,MAAOA,EACPE,UAAWA,OAMrBE,EAAoBd,UAAYA,EAChCc,EAAoBmB,YAAc,sBAEnBnB","file":"chunks/chunk.94.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport PropTypes from 'prop-types';\nimport { STYLE_TOGGLE_OPTIONS } from 'constants/customizationVariables';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport setCellFontStyle from 'src/helpers/setCellFontStyle';\n\nconst propTypes = {\n  styleType: PropTypes.oneOf(Object.values(STYLE_TOGGLE_OPTIONS)).isRequired,\n  isFlyoutItem: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst CellDecoratorButton = forwardRef((props, ref) => {\n  const { isFlyoutItem, styleType, style, className } = props;\n  const currentFontStyle = useSelector((state) => selectors.getActiveCellRangeFontStyle(state, styleType));\n  const isActive = currentFontStyle;\n  const { dataElement, icon, title } = menuItems[`${styleType}Button`];\n\n  const handleClick = () => {\n    setCellFontStyle({ [styleType]: !isActive });\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        additionalClass={isActive ? 'active' : ''}\n      />\n      : (\n        <ActionButton\n          ariaCurrent={isActive}\n          isActive={isActive}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          onClick={handleClick}\n          style={style}\n          className={className}\n        />\n      )\n  );\n});\n\nCellDecoratorButton.propTypes = propTypes;\nCellDecoratorButton.displayName = 'CellDecoratorButton';\n\nexport default CellDecoratorButton;"],"sourceRoot":""}