{"version":3,"sources":["webpack:///./src/ui/src/helpers/mergeCellRange.js","webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/MergeToggleButton.js"],"names":["mergeCellRange","merge","core","getDocumentViewer","getSpreadsheetEditorManager","setSelectedCellsStyle","propTypes","type","PropTypes","string","isFlyoutItem","bool","style","object","className","MergeToggleButton","forwardRef","props","ref","isMerged","useSelector","state","selectors","getIsCellRangeMerged","isCellRangeMergeDisabled","getIsSingleCell","menuItems","dataElement","icon","title","handleClick","FlyoutItemContainer","onClick","additionalClass","ActionButton","key","isActive","img","ariaPressed","disabled","displayName"],"mappings":"gMASeA,MAPf,SAAwBC,GACWC,IAAKC,oBAAoBC,8BACjCC,sBAAsB,CAC7CJ,W,mOCIJ,IAAMK,EAAY,CAChBC,KAAMC,IAAUC,OAChBC,aAAcF,IAAUG,KACxBC,MAAOJ,IAAUK,OACjBC,UAAWN,IAAUC,QAGjBM,EAAoBC,sBAAW,SAACC,EAAOC,GAC3C,IAAQR,EAAyCO,EAAzCP,aAAcH,EAA2BU,EAA3BV,KAAMK,EAAqBK,EAArBL,MAAOE,EAAcG,EAAdH,UAC7BK,EAAWC,aAAY,SAACC,GAAK,OAAKC,IAAUC,qBAAqBF,MACjEG,EAA2BJ,aAAY,SAACC,GAAK,OAAKC,IAAUG,gBAAgBJ,MAClF,EAAqCK,IAAUP,EAAW,oBAAsB,mBAAxEQ,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAErBC,EAAc,WAClB9B,GAAgBmB,IAGlB,OACET,EACE,kBAACqB,EAAA,EAAmB,KACdd,EAAK,CACTC,IAAKA,EACLc,QAASF,EACTG,gBAAiBd,EAAW,SAAW,MAGvC,kBAACe,EAAA,EAAY,CACXC,IAAK5B,EACL6B,SAAUjB,EACVa,QAASF,EACTH,YAAaA,EACbE,MAAOA,EACPQ,IAAKT,EACLU,YAAanB,EACbP,MAAOA,EACPE,UAAWA,EACXyB,SAAUf,OAMpBT,EAAkBT,UAAYA,EAC9BS,EAAkByB,YAAc,oBAEjBzB","file":"chunks/chunk.97.js","sourcesContent":["import core from 'core';\n\nfunction mergeCellRange(merge) {\n  const spreadsheetEditorManager = core.getDocumentViewer().getSpreadsheetEditorManager();\n  spreadsheetEditorManager.setSelectedCellsStyle({\n    merge,\n  });\n}\n\nexport default mergeCellRange;","import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport selectors from 'selectors';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport mergeCellRange from 'src/helpers/mergeCellRange';\n\nconst propTypes = {\n  type: PropTypes.string,\n  isFlyoutItem: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst MergeToggleButton = forwardRef((props, ref) => {\n  const { isFlyoutItem, type, style, className } = props;\n  const isMerged = useSelector((state) => selectors.getIsCellRangeMerged(state));\n  const isCellRangeMergeDisabled = useSelector((state) => selectors.getIsSingleCell(state));\n  const { dataElement, icon, title } = menuItems[isMerged ? 'cellUnmergeToggle' : 'cellMergeToggle'];\n\n  const handleClick = () => {\n    mergeCellRange(!isMerged);\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        additionalClass={isMerged ? 'active' : ''}\n      />\n      : (\n        <ActionButton\n          key={type}\n          isActive={isMerged}\n          onClick={handleClick}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          ariaPressed={isMerged}\n          style={style}\n          className={className}\n          disabled={isCellRangeMergeDisabled}\n        />\n      )\n  );\n});\n\nMergeToggleButton.propTypes = propTypes;\nMergeToggleButton.displayName = 'MergeToggleButton';\n\nexport default MergeToggleButton;"],"sourceRoot":""}