{"version":3,"sources":["webpack:///./src/ui/src/helpers/setCellFormatString.js","webpack:///./src/ui/src/components/ModularComponents/PresetButton/buttons/SheetEditor/CellFormatButton.js"],"names":["regexOfValidFormatstring","isFinancialFormat","formatString","test","isAccountingFormat","adjustDecimalForSemicolonSeparatedFormat","options","preserveTrailingSemicolon","adjustDecimalFunction","undefined","includes","hasTrailingSemicolon","endsWith","sanitizedFormat","replace","split","positive","negative","newPositive","newNegative","result","addOneDecimalPlace","_","intZero","decimalPart","repeat","length","removeOneDecimalPlace","match","integerPart","suffix","slice","adjustDecimalOnFormatString","type","isQuoted","isAccounting","isFinancial","hasSpecialSymbols","hasSemicolon","isGeneral","trim","toLowerCase","isDateLike","cannotBeAdjustedWithDecimal","setCellFormatString","formatType","cell","core","getDocumentViewer","getSpreadsheetEditorManager","getSelectedCells","cellStyle","getStyle","newFormatString","currentFormatString","getDataFormatString","Number","isNaN","numericCellValue","getDecimalAdjustedFormatString","formatsMap","setSelectedCellsStyle","propTypes","PropTypes","string","isFlyoutItem","bool","secondaryLabel","style","object","className","selector","func","CellFormatButton","forwardRef","props","ref","currentFormatType","useSelector","state","selectors","getActiveCellFormatType","isActive","menuItems","dataElement","icon","title","handleClick","FlyoutItemContainer","onClick","additionalClass","ActionButton","key","img","ariaPressed","displayName"],"mappings":"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","file":"chunks/chunk.95.js","sourcesContent":["import core from 'core';\nimport { formatsMap } from 'src/constants/spreadsheetEditor';\n\n/**\n * @ignore\n * Example of valid format string: '0.00', '#,##0.00', '0.00%', '0%', '0.00E+00'\n * Example of invalid format string: '0.00;[Red]-0.00', '@', '_', '\"0.00\"', '($* #,##0_)'\n */\nconst regexOfValidFormatstring = /^([^\\d#,.%]{0,10}[#0,]+)(\\.0+)?([^\\d]{0,10})$/;\n\n/**\n * @ignore\n * Check if the format string is a valid financial format,\n * valid examples:\n * - '#,##0.00;(#,##0.00)'   ----- 15.00, (-15.00);\n * - '#,##0;(#,##0)'         ----- 15, (-15);\n * - '#,##0.000;(#,##0.000)' ----- 15.000, (-15.000);\n * @param {string} formatString\n * @returns {Boolean}\n */\nexport const isFinancialFormat = (formatString) => {\n  const financialRegex = /^#,##0(\\.0+)?;\\(#,##0(\\.0+)?\\)$/;\n  return financialRegex.test(formatString);\n};\n\n/**\n * @ignore\n * Check if the format string is a valid accounting format,\n * valid examples:\n * - '_($* #,##0_);_($* (#,##0);'          ----- $15, $(15)\n * - '_($* #,##0.00_);_($* (#,##0.00);'    ----- $15.00, $(-15.00);\n * - '_($* #,##0.000_);_($* (#,##0.000);'  ----- $15.000, $(-15.000);\n * @param {string} formatString\n * @returns {Boolean}\n */\nexport const isAccountingFormat = (formatString) => {\n  const accountingRegex = /^_\\(\\$\\* #,##0(\\.0+)?_\\);_\\(\\$\\* \\(#,##0(\\.0+)?\\);$/;\n  return accountingRegex.test(formatString);\n};\n\n/**\n * @ignore\n * Check if the format string is invalid to be adjusted with decimal\n * The invalid cases are\n * (1) composite format strings that are not financial or accounting format\n * (2) format strings with special characters like '@' or '_' that are not accounting format\n * (3) format string with double quotes like '\"0.00\"' is invalid\n * (4) 'General' as format string is invalid\n * (5) date-like format strings like 'MM/dd/yyyy' or 'hh:mm:ss AM/PM' are invalid\n * @param {*} formatString\n * @returns {Boolean}\n */\nexport function cannotBeAdjustedWithDecimal(formatString) {\n  const isQuoted = /\".+?\"/.test(formatString);\n  const isAccounting = isAccountingFormat(formatString);\n  const isFinancial = isFinancialFormat(formatString);\n  const hasSpecialSymbols = /[_*@]/.test(formatString);\n  const hasSemicolon = formatString?.includes(';');\n  const isGeneral = formatString.trim().toLowerCase() === 'general';\n  const isDateLike = /\\b([ymdhs])\\1*\\b/i.test(formatString);\n\n  return (\n    !formatString ||\n    isGeneral ||\n    isDateLike ||\n    isQuoted ||\n    (hasSemicolon && !isFinancial && !isAccounting) ||\n    (hasSpecialSymbols && !isAccounting)\n  );\n}\n\nexport const adjustDecimalForSemicolonSeparatedFormat = (formatString, options = {\n  preserveTrailingSemicolon: false,\n  adjustDecimalFunction: undefined,\n}) => {\n  if (!options.adjustDecimalFunction || !formatString.includes(';')) {\n    return formatString;\n  }\n  const { preserveTrailingSemicolon = false, adjustDecimalFunction } = options;\n  const hasTrailingSemicolon = preserveTrailingSemicolon && formatString.endsWith(';');\n\n  const sanitizedFormat = preserveTrailingSemicolon ? formatString.replace(/;$/, '') : formatString;\n  const [positive, negative] = sanitizedFormat.split(';');\n\n  const newPositive = adjustDecimalFunction(positive);\n  const newNegative = negative ? adjustDecimalFunction(negative) : newPositive;\n  let result = `${newPositive};${newNegative}`;\n\n  if (hasTrailingSemicolon) {\n    result += ';';\n  }\n\n  return result;\n};\n\nexport const addOneDecimalPlace = (formatString) => {\n  return formatString.replace(/(0)(\\.0+)?/, (_, intZero, decimalPart) => {\n    if (decimalPart) {\n      // if there is already a decimal part, add one more 0\n      return `${intZero}.${'0'.repeat(decimalPart.length - 1 + 1)}`;\n    } else {\n      return `${intZero}.0`;\n    }\n  });\n};\n\n/**\n * @ignore\n * Utility function for accounting and financial format to remove one decimal place from a part of the format string.\n * @param {string} formatSubgString\n * @returns {string} - The modified format string with one decimal place removed.\n */\nexport const removeOneDecimalPlace = (formatString) => {\n  const match = formatString.match(regexOfValidFormatstring);\n  if (!match || match.length < 2) {\n    return formatString;\n  }\n\n  const integerPart = match[1];\n  let decimalPart = match[2] || '';\n  const suffix = match[3] || '';\n\n  if (!decimalPart) {\n    return formatString;\n  }\n\n  decimalPart = decimalPart.slice(0, -1);\n  if (decimalPart === '.') {\n    decimalPart = '';\n  }\n\n  return `${integerPart}${decimalPart}${suffix}`;\n};\n\nexport function adjustDecimalOnFormatString(formatString, type) {\n  if (cannotBeAdjustedWithDecimal(formatString)) {\n    return formatString;\n  }\n\n  const adjustDecimalFunction = type === 'increaseDecimalFormat' ? addOneDecimalPlace : removeOneDecimalPlace;\n\n  if (isFinancialFormat(formatString)) {\n    return adjustDecimalForSemicolonSeparatedFormat(formatString, {\n      adjustDecimalFunction,\n    });\n  }\n\n  if (isAccountingFormat(formatString)) {\n    return adjustDecimalForSemicolonSeparatedFormat(formatString, {\n      preserveTrailingSemicolon: true,\n      adjustDecimalFunction,\n    });\n  }\n\n  return adjustDecimalFunction(formatString);\n}\n\nexport function getDecimalAdjustedFormatString(type) {\n  const spreadsheetEditorManager = core.getDocumentViewer().getSpreadsheetEditorManager();\n  const cells = spreadsheetEditorManager.getSelectedCells();\n  const cell = cells[0];\n  const cellStyle = cell.getStyle();\n  if (!cellStyle) {\n    return;\n  }\n  const currentFormatString = cellStyle.getDataFormatString();\n\n  let newFormatString;\n  // In the case of entering a number initially, the format string will be 'General' and the numericCellValue will be a number\n  // we want to set the format string to '#0' in this case before adjusting the decimal\n  const shouldSetToNumberFormat = currentFormatString === 'General' && !Number.isNaN(cell.numericCellValue);\n  if (shouldSetToNumberFormat) {\n    newFormatString = '#0';\n  }\n\n  newFormatString = adjustDecimalOnFormatString(newFormatString || currentFormatString, type);\n\n  return newFormatString;\n}\n\nfunction setCellFormatString(formatType) {\n  let formatString;\n  if (formatType === 'decreaseDecimalFormat' || formatType === 'increaseDecimalFormat') {\n    formatString = getDecimalAdjustedFormatString(formatType);\n  } else {\n    formatString = formatsMap[formatType];\n  }\n\n  if (!formatString) {\n    return;\n  }\n\n  const spreadsheetEditorManager = core.getDocumentViewer().getSpreadsheetEditorManager();\n  spreadsheetEditorManager.setSelectedCellsStyle({\n    formatString,\n  });\n}\n\nexport default setCellFormatString;","import React, { forwardRef } from 'react';\nimport ActionButton from 'components/ActionButton';\nimport PropTypes from 'prop-types';\nimport FlyoutItemContainer from '../../../FlyoutItemContainer';\nimport { menuItems } from '../../../Helpers/menuItems';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport setCellFormatString from '../../../../../helpers/setCellFormatString';\n\nconst propTypes = {\n  formatType: PropTypes.string,\n  isFlyoutItem: PropTypes.bool,\n  secondaryLabel: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  selector: PropTypes.func,\n};\n\nconst CellFormatButton = forwardRef((props, ref) => {\n  const { isFlyoutItem, formatType, secondaryLabel, style, className } = props;\n  const currentFormatType = useSelector((state) => selectors.getActiveCellFormatType(state));\n  const isActive = formatType === currentFormatType;\n\n  const { dataElement, icon, title } = menuItems[formatType];\n\n  const handleClick = () => {\n    setCellFormatString(formatType);\n  };\n\n  return (\n    isFlyoutItem ?\n      <FlyoutItemContainer\n        {...props}\n        ref={ref}\n        onClick={handleClick}\n        secondaryLabel={secondaryLabel}\n        additionalClass={isActive ? 'active' : ''}\n      />\n      : (\n        <ActionButton\n          key={formatType}\n          isActive={isActive}\n          onClick={handleClick}\n          dataElement={dataElement}\n          title={title}\n          img={icon}\n          ariaPressed={isActive}\n          style={style}\n          className={className}\n        />\n      )\n  );\n});\n\nCellFormatButton.propTypes = propTypes;\nCellFormatButton.displayName = 'CellFormatButton';\n\nexport default CellFormatButton;"],"sourceRoot":""}